{
    "script": "function getResource(fileName) {\n    return fetch(chrome.runtime.getURL(fileName))\n        .then(res => {\n            if (!res.ok) throw new Error(`HTTP ${res.status}`);\n            return res.text();\n        });\n}\n\nlet config = null;\n\ngetResource(\"files.json\")\n    .then(text => {\n        config = JSON.parse(text);\n\n        if (Array.isArray(config.files)) {\n            config.files.forEach(entry => {\n                entry.regexObj = new RegExp(entry.regex);\n            });\n        } else {\n            config.files = [];\n        }\n\n        if (!Array.isArray(config.urls)) {\n            config.urls = [];\n        }\n\n        console.log(\"Loaded config.json:\", config);\n    })\n    .catch(err => {\n        console.error(\"Failed to load config.json:\", err);\n        config = { urls: [], files: [] };\n    });\n\nchrome.webRequest.onBeforeRequest.addListener(\n    (details) => {\n        if (!config) {\n            return {};\n        }\n\n        const matchedEntry = config.files.find(entry => entry.regexObj.test(details.url));\n        if (!matchedEntry) {\n            return {};\n        }\n\n        let mainScript = matchedEntry.name || \"\";\n\n        const filter = chrome.webRequest.filterResponseData(details.requestId);\n        const encoder = new TextEncoder();\n\n        getResource(mainScript)\n            .then(mainCode => {\n                filter.onstart = () => {\n                    filter.write(encoder.encode(mainCode));\n                    filter.disconnect();\n                };\n            })\n            .catch(err => {\n                console.error(\"Failed to load main script:\", err);\n                filter.disconnect();\n            });\n\n        return {};\n    },\n    {\n        urls: config ? config.urls : [\"<all_urls>\"],\n        types: [\"script\"]\n    },\n    [\"blocking\"]\n);",
    "config": "{\n  \"manifest_version\": 3,\n  \"name\": \"%EXTENSION_NAME%\",\n  \"version\": \"%EXTENSION_VERSION%\",\n  \"permissions\": [\n    \"webRequest\",\n    \"webRequestBlocking\",\n    \"webRequestFilterResponse\",\n    \"scripting\",\n    \"declarativeNetRequest\",\n    \"declarativeNetRequestWithHostAccess\"\n  ],\n  \"host_permissions\": [\n    \"<all_urls>\"\n  ],\n  \"background\": {\n    \"scripts\": [\n      \"background.js\"\n    ]\n  },\n  \"action\": {\n    \"default_icon\": {\n      \"16\": \"icons/icon16.png\",\n      \"48\": \"icons/icon48.png\",\n      \"128\": \"icons/icon128.png\"\n    },\n    \"default_title\": \"Hydra Loader\"\n  },\n  \"web_accessible_resources\": [\n    {\n      \"resources\": [\n        \"%EXPOSED_FILES%\"\n      ],\n      \"matches\": [\"<all_urls>\"]\n    }\n  ],\n  \"icons\": {\n    \"16\": \"icons/icon16.png\",\n    \"48\": \"icons/icon48.png\",\n    \"128\": \"icons/icon128.png\"\n  }\n}"
}
